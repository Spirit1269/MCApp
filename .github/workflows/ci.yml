name: CI/CD Pipeline

on:
  push:          { branches: [ main ] }
  pull_request:  { branches: [ main ] }
  workflow_dispatch:

env:
  AZURE_ACR_NAME: motorcycleclubhubacr   # ← your actual ACR name, without “.azurecr.io”
  AZURE_WEBAPP_NAME: mcapp
  API_DIRECTORY: src/api
  DATABASE_CONNECTION_STRING: ${{ secrets.DATABASE_CONNECTION_STRING }}


#####################################################################
# 1. BUILD JOB
#####################################################################
jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tag }}   # pass container tag downstream
    steps:
    # ────────── checkout ──────────
    - uses: actions/checkout@v3

    # ────────── Node + pnpm, build Next.js static site ──────────
    - uses: pnpm/action-setup@v2
      with: { version: 10.11.1, run_install: false }

    - uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: pnpm
        cache-dependency-path: pnpm-lock.yaml

    - name: Install JS deps
      run: pnpm install --frozen-lockfile

    - name: Build Next.js (static export)
      run: pnpm next build    # `output: "export"` is in next.config.js

    - name: Upload static site
      uses: actions/upload-artifact@v4
      with:
        name: nextjs-build
        path: out/

    # ────────── .NET build & EF migration ──────────
    - uses: actions/setup-dotnet@v3
      with: { dotnet-version: 8.0.x }

    - name: Restore & build API
      working-directory: ${{ env.API_DIRECTORY }}
      run: |
        dotnet restore
        dotnet build --configuration Release --no-restore

    - name: Run EF Core migrations
      working-directory: ${{ env.API_DIRECTORY }}
      run: |
        dotnet tool install -g dotnet-ef
        dotnet ef database update --connection "$DATABASE_CONNECTION_STRING"

    - name: Upload API build
      uses: actions/upload-artifact@v4
      with:
        name: api-build
        path: ${{ env.API_DIRECTORY }}/bin/Release

    # ────────── Build container & push to ACR ──────────
     # ────────── Docker login & push ──────────
    - name: Docker meta
      id: meta
      run: echo "tag=${{ github.sha }}" >> $GITHUB_OUTPUT

    - name: Azure login for ACR
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Docker login to ACR (CLI)
      run: az acr login --name ${{ env.AZURE_ACR_NAME }}

    - name: Build & push image
      run: |
        docker build \
          -f ${{ env.API_DIRECTORY }}/Dockerfile \
          -t ${{ env.AZURE_ACR_NAME }}.azurecr.io/ ${{ env.AZURE_WEBAPP_NAME }}:${{ steps.meta.outputs.tag }} \
          .
        docker push ${{ env.AZURE_ACR_NAME }}.azurecr.io/${{ env.AZURE_WEBAPP_NAME }}:${{ steps.meta.outputs.tag }}
        docker tag ${{ env.AZURE_ACR_NAME }}.azurecr.io/ ${{ env.AZURE_WEBAPP_NAME }}:${{ steps.meta.outputs.tag }} \
                    ${{ env.AZURE_ACR_NAME }}.azurecr.io/ ${{ env.AZURE_WEBAPP_NAME }}:latest
        docker push ${{ env.AZURE_ACR_NAME }}.azurecr.io/ ${{ env.AZURE_WEBAPP_NAME }}:latest

#####################################################################
# 2. DEPLOY STATIC WEB APP
#####################################################################
  deploy-static-web-app:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v3

    - uses: actions/download-artifact@v4
      with:
        name: nextjs-build
        path: out/

    - uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_BLUE_FIELD_0F8B9F710 }}
        repo_token:                      ${{ secrets.GITHUB_TOKEN }}
        action: upload
        app_location: out
        api_location: ""             # <- no serverless API in SWA
        skip_app_build: true

#####################################################################
# 3. DEPLOY API CONTAINER
#####################################################################
  deploy-api:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        images:   ${{ env.AZURE_ACR_NAME }}.azurecr.io/motorcycle-club-hub-api:${{ needs.build.outputs.image-tag }}

